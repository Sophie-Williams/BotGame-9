using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;

public class LevelAssetPostprocessor : AssetPostprocessor
{
	void OnPostprocessModel(GameObject g)
	{
		Apply(g.transform);
	}

	/// <summary>
	/// Iterate through the model and apply special transforms depending on the name of the element.
	/// 
	/// Any non-special elements are treated like static geometry.
	/// </summary>
	/// <param name="root"></param>
	void Apply(Transform root)
	{
		foreach (Transform t in root)
		{
			if (t.name.Equals("InteractionColliders"))
			{
				Debug.Log("Adding interaction colliders");
				ApplyInteractionColliders(t);
				continue;
			}

			if (t.name.Equals("Colliders"))
			{
				Debug.Log("Adding colliders");
				ApplyColliders(t);
				continue;
			}

			ApplyStaticGeometry(t);
		}
	}

	/// <summary>
	/// Mark geometry as static to allow for baked lighting.
	/// </summary>
	/// <param name="t"></param>
	void ApplyStaticGeometry(Transform t)
	{
		// NB: skip CTRL geometry, these are empties or meshes used for guiding or creating
		// more complex meshes.
		//
		// They are generated by Blender plugins like ArchiMesh.
		if (t.name.StartsWith("CTRL_"))
		{
			UnityEngine.Object.DestroyImmediate(t.GetComponent<MeshRenderer>());
			return;
		}

		foreach (Transform child in t)
		{
			child.gameObject.isStatic = true;
			ApplyStaticGeometry(child);
		}
	}

	/// <summary>
	/// Add interaction colliders which prevent interaction rays from reaching through.
	/// 
	/// This is used to create geometry that prevents interacting from going through things, like walls.
	/// </summary>
	/// <param name="t"></param>
	void ApplyInteractionColliders(Transform t)
	{
		foreach (Transform child in t)
		{
			// NB: block interaction rays
			child.gameObject.layer = LayerMask.NameToLayer("Interactable");
			child.gameObject.tag = "InteractionCollider";

			child.gameObject.AddComponent<MeshCollider>();
			UnityEngine.Object.DestroyImmediate(child.GetComponent<MeshRenderer>());
		}
	}

	/// <summary>
	/// Add interaction colliders which prevent interaction rays from reaching through.
	/// 
	/// This is used to create geometry that prevents interacting from going through things, like walls.
	/// </summary>
	/// <param name="t"></param>
	void ApplyColliders(Transform t)
	{
		foreach (Transform child in t)
		{
			child.gameObject.layer = LayerMask.NameToLayer("Default");
			child.gameObject.AddComponent<MeshCollider>();
			UnityEngine.Object.DestroyImmediate(child.GetComponent<MeshRenderer>());
		}
	}
}
